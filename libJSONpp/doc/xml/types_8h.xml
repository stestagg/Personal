<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.5">
  <compounddef id="types_8h" kind="file">
    <compoundname>types.h</compoundname>
    <includes refid="config_8h" local="yes">config.h</includes>
    <includes local="no">string</includes>
    <includes local="yes">string.h</includes>
    <includes refid="stdcontainers_8h" local="yes">stdcontainers.h</includes>
    <includedby refid="convert_8h" local="yes">k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/convert.h</includedby>
    <includedby refid="parser__errors_8cpp" local="yes">k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_errors.cpp</includedby>
    <includedby refid="parser__errors_8h" local="yes">k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_errors.h</includedby>
    <includedby refid="value_8h" local="yes">k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/value.h</includedby>
    <includedby refid="types_8cpp" local="yes">k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.cpp</includedby>
    <incdepgraph>
      <node id="133">
        <label>string</label>
      </node>
      <node id="136">
        <label>map</label>
      </node>
      <node id="132">
        <label>config.h</label>
        <link refid="config_8h"/>
      </node>
      <node id="135">
        <label>stdcontainers.h</label>
        <link refid="stdcontainers_8h"/>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
      </node>
      <node id="134">
        <label>string.h</label>
      </node>
      <node id="131">
        <label>k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h</label>
        <link refid="types.h"/>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
      </node>
      <node id="137">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="145">
        <label>k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_errors.h</label>
        <link refid="parser__errors_8h"/>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
      </node>
      <node id="143">
        <label>k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/value.cpp</label>
        <link refid="value_8cpp"/>
      </node>
      <node id="146">
        <label>k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/value.h</label>
        <link refid="value_8h"/>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
      </node>
      <node id="140">
        <label>k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/convert.cpp</label>
        <link refid="convert_8cpp"/>
      </node>
      <node id="147">
        <label>k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UNI.h</label>
        <link refid="parser___u_n_i_8h"/>
        <childnode refid="141" relation="include">
        </childnode>
      </node>
      <node id="139">
        <label>k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/convert.h</label>
        <link refid="convert_8h"/>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
      </node>
      <node id="138">
        <label>k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h</label>
        <link refid="types.h"/>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
      </node>
      <node id="141">
        <label>k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UNI.cpp</label>
        <link refid="parser___u_n_i_8cpp"/>
      </node>
      <node id="148">
        <label>k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h</label>
        <link refid="parser___u_t_f8_8h"/>
        <childnode refid="142" relation="include">
        </childnode>
      </node>
      <node id="149">
        <label>k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.cpp</label>
        <link refid="types_8cpp"/>
      </node>
      <node id="142">
        <label>k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp</label>
        <link refid="parser___u_t_f8_8cpp"/>
      </node>
      <node id="144">
        <label>k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_errors.cpp</label>
        <link refid="parser__errors_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structastr_cmp" prot="public">astrCmp</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="types_8h_1364f6ab3ccc51f240b299f6e9d84016c" prot="public" static="no">
        <name>astrlen</name>
        <initializer>wcslen</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" line="21" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="types_8h_13d7d1b6b25e26030cf09f680a1aa0e81" prot="public" static="no">
        <name>A</name>
        <param><defname>x</defname></param>
        <initializer>L##x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="types_8h_13d7d1b6b25e26030cf09f680a1aa0e81" kindref="member">A()</ref> is a macro similar to the windows T() macro. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" line="23" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="types_8h_184ddd45a57947dd14837d5c127fcc226" prot="public" static="no">
        <name>pfINT</name>
        <initializer>pfINT64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" line="100" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="types_8h_19c13b19569640ebf39ca3b9a136d3d7f" prot="public" static="no">
        <name>aint_max</name>
        <initializer>int64_max</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" line="101" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="types_8h_1888ed67715379064f3e9f72242fefff0" prot="public" static="no">
        <name>strtoaint</name>
        <initializer>strtoi64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" line="102" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="types_8h_1e8e63e517ee873e5297708ef2e9d5052" prot="public" static="no">
        <name>wcstoaint</name>
        <initializer>wcstoi64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" line="103" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="types_8h_1a154555311b23a2632d91f0531cac2c4" prot="public" static="no">
        <name>pfFLOAT</name>
        <initializer>&quot;f&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" line="118" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="types_8h_1bc73ed3eebb94ad6e4b3a4f84fc6f882" prot="public" static="no">
        <type>wchar_t</type>
        <definition>typedef wchar_t achar</definition>
        <argsstring></argsstring>
        <name>achar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If JSON_USE_CHAR is defined, then achar and astr use char type. If JSON_USE_WCHAR is defines, then achar and astr use wchar_t type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" line="19" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="types_8h_11009581ac1ad90256bcfd618275becaf" prot="public" static="no">
        <type>std::wstring</type>
        <definition>typedef std::wstring astr</definition>
        <argsstring></argsstring>
        <name>astr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" line="20" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="types_8h_1af23a2fdba3012f0c512f0fc318512d9" prot="public" static="no">
        <type>int64_t</type>
        <definition>typedef int64_t aint</definition>
        <argsstring></argsstring>
        <name>aint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" line="105" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="types_8h_1e762403f037733722b8e9808df502694" prot="public" static="no">
        <type>double</type>
        <definition>typedef double afloat</definition>
        <argsstring></argsstring>
        <name>afloat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" line="119" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>JSON_types_h_INCLUDED</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>JSON_types_h_INCLUDED</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#include<sp/>&quot;<ref refid="config_8h" kindref="compound">config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>JSON_WINDOWS</highlight></codeline>
<codeline lineno="7"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG</highlight></codeline>
<codeline lineno="8"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_CRTDBG_MAP_ALLOC</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//CHAR<sp/>definition,<sp/>WCHAR<sp/>implies<sp/>unicode,<sp/>CHAR<sp/>implies<sp/>UTF8<sp/>or<sp/>ANSII</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>JSON_USE_WCHAR</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/><ref refid="types_8h_1bc73ed3eebb94ad6e4b3a4f84fc6f882" kindref="member">achar</ref><sp/>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::wstring<sp/><ref refid="types_8h_11009581ac1ad90256bcfd618275becaf" kindref="member">astr</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>astrlen<sp/>wcslen</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>A(x)<sp/>L##x</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>JSON_USE_CHAR</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="types_8h_1bc73ed3eebb94ad6e4b3a4f84fc6f882" kindref="member">achar</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="types_8h_11009581ac1ad90256bcfd618275becaf" kindref="member">astr</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>astrlen<sp/>strlen</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>A(x)<sp/>x</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#error<sp/>Please<sp/>define<sp/>a<sp/>valid<sp/>char<sp/>defintion<sp/>macro<sp/>in<sp/>config.h,<sp/>look<sp/>here<sp/>for<sp/>options.</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;string.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="structastr_cmp" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structastr_cmp" kindref="compound" tooltip="this wrapper functor is used to provide correct ordering for std::map objects">astrCmp</ref><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structastr_cmp_1d9350469bb4abc36fe2ac184eaf6d752" kindref="member">operator()</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="types_8h_1bc73ed3eebb94ad6e4b3a4f84fc6f882" kindref="member">achar</ref>*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="types_8h_1bc73ed3eebb94ad6e4b3a4f84fc6f882" kindref="member">achar</ref>*<sp/>s2<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">};<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//OBJECT<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>JSON_USE_STDCONTS</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#include<sp/>&quot;<ref refid="stdcontainers_8h" kindref="compound">stdcontainers.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#error<sp/>Currently<sp/>only<sp/>JSON_USE_STDCONTS<sp/>Implemented,<sp/>it<sp/>must<sp/>be<sp/>defined</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//NUMBER<sp/>definitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>JSON_NO_int64</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>int64_t<sp/>is<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>JSON_WINDOWS</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>pfINT64<sp/>&quot;I64i&quot;</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>int64_max<sp/>LLONG_MAX</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>__int64<sp/>int64_t;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>strtoi64<sp/>_strtoi64</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>wcstoi64<sp/>_wcstoi64</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>JSON_POSIX</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>pfINT64<sp/>&quot;lli&quot;<sp/></highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>strtoi64<sp/>strtoll</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>wcstoi64<sp/>wcstoll</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>INT64_MAX</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>define<sp/>INT64_MAX<sp/>(9223372036854775807<sp/>##<sp/>LL)</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>int64_max<sp/>INT64_MAX</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>JSON_NUMBER_INT</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>pfINT<sp/>&quot;i&quot;</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>aint_max<sp/>INT_MAX<sp/></highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>strtoaint<sp/>strtol</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>wcstoaint<sp/>wcstol</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="types_8h_1af23a2fdba3012f0c512f0fc318512d9" kindref="member">aint</ref><sp/>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>JSON_NUMBER_LONG</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>pfINT<sp/>&quot;li&quot;</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>aint_max<sp/>LONG_MAX</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>strtoaint<sp/>strtol</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>wcstoaint<sp/>wcstol</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="types_8h_1af23a2fdba3012f0c512f0fc318512d9" kindref="member">aint</ref><sp/>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>JSON_NUMBER_i64</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>JSON_NO_int64</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#error<sp/>Cannot<sp/>define<sp/>NUMBER<sp/>to<sp/>int64_t<sp/>whe<sp/>NO_int64<sp/>is<sp/>defined.<sp/><sp/>CHECK<sp/>YOUR<sp/>CONFIG.H</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>pfINT<sp/>pfINT64</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>aint_max<sp/>int64_max</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>strtoaint<sp/>strtoi64</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>wcstoaint<sp/>wcstoi64</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int64_t<sp/><ref refid="types_8h_1af23a2fdba3012f0c512f0fc318512d9" kindref="member">aint</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#error<sp/>Please<sp/>define<sp/>a<sp/>valid<sp/>macro<sp/>to<sp/>specify<sp/>the<sp/>storage-type<sp/>of<sp/>integer<sp/>NUMBERs</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//NUMBER<sp/>definitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>JSON_NUMBER_FLOAT</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>pfFLOAT<sp/>&quot;f&quot;</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="types_8h_1e762403f037733722b8e9808df502694" kindref="member">afloat</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>JSON_NUMBER_DOUBLE</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>pfFLOAT<sp/>&quot;f&quot;</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="types_8h_1e762403f037733722b8e9808df502694" kindref="member">afloat</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#error<sp/>Please<sp/>define<sp/>a<sp/>valid<sp/>macro<sp/>to<sp/>specify<sp/>the<sp/>storage-type<sp/>of<sp/>NUMBERs</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/types.h"/>
  </compounddef>
</doxygen>

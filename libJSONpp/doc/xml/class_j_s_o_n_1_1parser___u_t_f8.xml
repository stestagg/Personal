<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.5">
  <compounddef id="class_j_s_o_n_1_1parser___u_t_f8" kind="class" prot="public">
    <compoundname>JSON::parser_UTF8</compoundname>
    <includes local="no">parser_UTF8.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_j_s_o_n_1_1parser___u_t_f8_1db2ee48be3d78c142d073e74f7d1189f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class JSON::test</definition>
        <argsstring></argsstring>
        <name>JSON::test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="75" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_j_s_o_n_1_1parser___u_t_f8_1096e54223fc96719019b00ce30327d1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class JSON::UTF_test</definition>
        <argsstring></argsstring>
        <name>JSON::UTF_test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="76" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_j_s_o_n_1_1parser___u_t_f8_12f6a518bd6ecd49ed7e675b5f78fc877" prot="private" static="no" mutable="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; JSON::parser_UTF8::errs</definition>
        <argsstring></argsstring>
        <name>errs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="87" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_j_s_o_n_1_1parser___u_t_f8_1b55fb139082b5de4bc93398e752b3cbd" prot="private" static="no" mutable="no">
        <type><ref refid="class_j_s_o_n_1_1utf8buffer" kindref="compound">utf8buffer</ref></type>
        <definition>utf8buffer JSON::parser_UTF8::bfr</definition>
        <argsstring></argsstring>
        <name>bfr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="99" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_119d72d4a8ec0b18ed26a728c46310852" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool JSON::parser_UTF8::isEOL</definition>
        <argsstring>()</argsstring>
        <name>isEOL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="77"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_13d7c3afa269d5a0d5ce7850834456ee2" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool parser_UTF8::readhexcode</definition>
        <argsstring>(const char *str, std::string &amp;dst)</argsstring>
        <name>readhexcode</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Tries to decode an escaped hex code of the form \xFF. </para>        </briefdescription>
        <detaileddescription>
<para>If the decoding fails, eg: \xFG, then the character &apos;?&apos; is appended instead</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the string that contains the \xFF.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to a wstring to which the decoded character will be appended. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="78" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="287" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_1d6b4bbfea526863b47b6bddc7f78a31c" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool parser_UTF8::readhexquad</definition>
        <argsstring>(const char *str, std::string &amp;dst)</argsstring>
        <name>readhexquad</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Tries to decode an escaped hex code of the form \uFFFF. </para>        </briefdescription>
        <detaileddescription>
<para>If the decoding fails, eg: \uFGHI, then the character &apos;?&apos; is appended instead</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the string that contains the \uFFFF.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to a wstring to which the decoded character will be appended. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="79" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="311" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_14b6b6df8920ae1eb798d2fb3ee58bfd8" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool parser_UTF8::charisNumeric</definition>
        <argsstring>(char test)</argsstring>
        <name>charisNumeric</name>
        <param>
          <type>char</type>
          <declname>test</declname>
        </param>
        <briefdescription>
<para>This function will test if <computeroutput>test</computeroutput> COULD be part of a standard number. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="80" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="267" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_19ec1e0f0c9040ae2d73d2051d94546e6" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool parser_UTF8::charskipWS</definition>
        <argsstring>(const char **test, int len)</argsstring>
        <name>charskipWS</name>
        <param>
          <type>const char **</type>
          <declname>test</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>This function will increment <computeroutput>test</computeroutput> IF it is a UTF-8 whitespace char. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>test</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a char array that holds at least one UTF-8 character to test. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer pointed to by <computeroutput>test</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if whitespace was skipped. false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="81" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="168" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_15f6e6c4ecce0d9c741265cab0335c2b0" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool parser_UTF8::charskipEOL</definition>
        <argsstring>(const char **test, size_t len)</argsstring>
        <name>charskipEOL</name>
        <param>
          <type>const char **</type>
          <declname>test</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>This function will increment <computeroutput>test</computeroutput> IF it is a UTF-8 eol char. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>test</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a char array that holds at least one UTF-8 character to test. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer pointed to by <computeroutput>test</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if end of line was skipped. false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="82" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="240" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_15daf7deff5ac8c6643c6a948c2557941" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int parser_UTF8::hextoint</definition>
        <argsstring>(char hexchar)</argsstring>
        <name>hextoint</name>
        <param>
          <type>char</type>
          <declname>hexchar</declname>
        </param>
        <briefdescription>
<para>converts a hex character into a binary number. Takes a wchar_t in the range: 0-9, a-f, A-F and returns the numberic <ref refid="class_j_s_o_n_1_1value" kindref="compound">value</ref> that it represents. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>-1 if the caracter is outside these ranges </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="85" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="339" bodyend="350"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_127d9c721c94772dbc41abf6adb0b97c0" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void parser_UTF8::parseEscapes</definition>
        <argsstring>(const char *strstart, const char *strend, astr &amp;rv)</argsstring>
        <name>parseEscapes</name>
        <param>
          <type>const char *</type>
          <declname>strstart</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strend</declname>
        </param>
        <param>
          <type><ref refid="types_8h_11009581ac1ad90256bcfd618275becaf" kindref="member">astr</ref> &amp;</type>
          <declname>rv</declname>
        </param>
        <briefdescription>
<para>copy a string, decoding escaped chars. The string <computeroutput>*strstart</computeroutput> ... <computeroutput>*strend</computeroutput>, will be copied into the std::[w]string <computeroutput>rv</computeroutput>. Escaped chars are decoded as specified in: <ulink url="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf">http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf</ulink> (7.8.4) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>-1 if the caracter is outside these ranges </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="83" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="362" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_1d1d46b64bbe46ccd4a91cb9b4daa98cf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parser_UTF8::adderror</definition>
        <argsstring>(int num)</argsstring>
        <name>adderror</name>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Simple wrapper function for adding error information. this may include line/col information at some date? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="88" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="783" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_18f26f14d15b59838efb1c75380006513" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parser_UTF8::readstring</definition>
        <argsstring>(astr &amp;rv)</argsstring>
        <name>readstring</name>
        <param>
          <type><ref refid="types_8h_11009581ac1ad90256bcfd618275becaf" kindref="member">astr</ref> &amp;</type>
          <declname>rv</declname>
        </param>
        <briefdescription>
<para>Reads a string from the input buffer and parses the esape chars. rv is set to the result. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="90" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="438" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_1111fd36185edc9a552acb41b5e82daee" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parser_UTF8::readunquotedstring</definition>
        <argsstring>(astr &amp;rv)</argsstring>
        <name>readunquotedstring</name>
        <param>
          <type><ref refid="types_8h_11009581ac1ad90256bcfd618275becaf" kindref="member">astr</ref> &amp;</type>
          <declname>rv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tries to guess what the user meant, because unquoted strings are strictly invalid syntax, this is a best-guess scenario.</para><para>Embedded escape chars are decoded, see <ref refid="class_j_s_o_n_1_1parser___u_n_i_17648ff1721b67cefba03e7a39146894e" kindref="member">parser_UNI::parseEscapes</ref></para><para>will read all input untill a Whitespace or &apos;:&apos; is encoutered. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="91" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="415" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_147c6ac30926aa72be75be6f60e9757f3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parser_UTF8::readlit</definition>
        <argsstring>(JSON::value &amp;rv)</argsstring>
        <name>readlit</name>
        <param>
          <type><ref refid="class_j_s_o_n_1_1value" kindref="compound">JSON::value</ref> &amp;</type>
          <declname>rv</declname>
        </param>
        <briefdescription>
<para>Reads a <ref refid="namespace_j_s_o_n" kindref="compound">JSON</ref> Literal from the input buffer and sets <computeroutput>rv</computeroutput> to it&apos;s <ref refid="class_j_s_o_n_1_1value" kindref="compound">value</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="92" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="467" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_116d5e391f6d4bb04fd4812ebe9a280fe" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parser_UTF8::readnum</definition>
        <argsstring>(JSON::value &amp;rv)</argsstring>
        <name>readnum</name>
        <param>
          <type><ref refid="class_j_s_o_n_1_1value" kindref="compound">JSON::value</ref> &amp;</type>
          <declname>rv</declname>
        </param>
        <briefdescription>
<para>Reads an ECMAScript conformant number from the input buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="93" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="523" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_17f390bac9b1df96640acfb3ced3f608f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parser_UTF8::readarray</definition>
        <argsstring>(JSON::value &amp;rv)</argsstring>
        <name>readarray</name>
        <param>
          <type><ref refid="class_j_s_o_n_1_1value" kindref="compound">JSON::value</ref> &amp;</type>
          <declname>rv</declname>
        </param>
        <briefdescription>
<para>Reads an array from the input stream into <computeroutput>rv</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="94" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="607" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_1327b5ededdd7095bc7bfb05d6d99bdf1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parser_UTF8::readobject</definition>
        <argsstring>(JSON::value &amp;rv)</argsstring>
        <name>readobject</name>
        <param>
          <type><ref refid="class_j_s_o_n_1_1value" kindref="compound">JSON::value</ref> &amp;</type>
          <declname>rv</declname>
        </param>
        <briefdescription>
<para>Reads an object from the input stream into <computeroutput>rv</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="95" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="660" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_1b6bf72aed403690c9db7eb159268ad21" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parser_UTF8::skipWS</definition>
        <argsstring>()</argsstring>
        <name>skipWS</name>
        <briefdescription>
<para>This function looks for, and skips over any whitespace or comments under the input pointer. </para>        </briefdescription>
        <detaileddescription>
<para>After calling this, the input pointer will be on a non-whitespace char OR the end of stream. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="96" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="557" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_1d46ff8757c23da4275dce8db69a135b7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_j_s_o_n_1_1value" kindref="compound">JSON::value</ref> &amp;</type>
        <definition>JSON::value &amp; parser_UTF8::getvalue</definition>
        <argsstring>(JSON::value &amp;rv)</argsstring>
        <name>getvalue</name>
        <param>
          <type><ref refid="class_j_s_o_n_1_1value" kindref="compound">JSON::value</ref> &amp;</type>
          <declname>rv</declname>
        </param>
        <briefdescription>
<para>Works out the type of, and then reads a <ref refid="class_j_s_o_n_1_1value" kindref="compound">value</ref> from the input stream into <computeroutput>rv</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="97" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="742" bodyend="777"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_1a7fe13e71520efe7478188af6f836d1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parser_UTF8::fail</definition>
        <argsstring>()</argsstring>
        <name>fail</name>
        <briefdescription>
<para>Has error <computeroutput>e</computeroutput> been raised yet? for the list of <ref refid="namespace_j_s_o_n_1_1errors" kindref="compound">errors</ref>, see: <ref refid="parser__errors_8cpp" kindref="compound">parser_errors.cpp</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="103" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="798" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_18c6baca6a0f18163fa3d36e9b39c8003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int parser_UTF8::errorcount</definition>
        <argsstring>()</argsstring>
        <name>errorcount</name>
        <briefdescription>
<para>Property getter for the errorcount. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="104" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="791" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_14e04b3d9a01020fbb6f65d50fe076763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; int &gt;</type>
        <definition>const std::vector&lt; int &gt; parser_UTF8::geterrors</definition>
        <argsstring>()</argsstring>
        <name>geterrors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="105" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="811" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_1f56b637e6feed65915e10e8e9a9aaf3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="types_8h_1bc73ed3eebb94ad6e4b3a4f84fc6f882" kindref="member">achar</ref> *</type>
        <definition>const achar * parser_UTF8::geterrorstring</definition>
        <argsstring>(int)</argsstring>
        <name>geterrorstring</name>
        <param>
          <type>int</type>
          <defname>i</defname>
        </param>
        <briefdescription>
<para>translates an error number into its description </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="106" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="831" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_15de60ef31696acaa8128341b0a1a21f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parser_UTF8::reseterrors</definition>
        <argsstring>()</argsstring>
        <name>reseterrors</name>
        <briefdescription>
<para>clear the error list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="107" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="806" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_1e0d86c88983afae5bdfa4558cc0d02af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parser_UTF8::haveerror</definition>
        <argsstring>(int)</argsstring>
        <name>haveerror</name>
        <param>
          <type>int</type>
          <defname>e</defname>
        </param>
        <briefdescription>
<para>Did parsing generate any <ref refid="namespace_j_s_o_n_1_1errors" kindref="compound">errors</ref>? Unfortunately, there is no way to gague the severity of the <ref refid="namespace_j_s_o_n_1_1errors" kindref="compound">errors</ref> yet. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="108" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="818" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_1524ae6d6fb2b696893e487796a6c0f1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parser_UTF8::parser_UTF8</definition>
        <argsstring>()</argsstring>
        <name>parser_UTF8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="111" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="899" bodyend="901"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_120d458ae937d09c55948b095d3e228bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parser_UTF8::parser_UTF8</definition>
        <argsstring>(const std::string s)</argsstring>
        <name>parser_UTF8</name>
        <param>
          <type>const std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>maps the NULL TERMINATED string <computeroutput>s</computeroutput> ready for calling <ref refid="class_j_s_o_n_1_1parser___u_t_f8_1f26ebd86e49b9e8c5b3d4fba16001679" kindref="member">parse(JSON::value &amp;)</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="112" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="889" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_17818ee16111f69bbd0e5176e92472898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parser_UTF8::parser_UTF8</definition>
        <argsstring>(const char *s)</argsstring>
        <name>parser_UTF8</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>maps the NULL TERMINATED string <computeroutput>s</computeroutput> ready for calling <ref refid="class_j_s_o_n_1_1parser___u_t_f8_1f26ebd86e49b9e8c5b3d4fba16001679" kindref="member">parse(JSON::value &amp;)</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="113" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="895" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_18fb6b4521e944c35c1fb231b3da3dd5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parser_UTF8::~parser_UTF8</definition>
        <argsstring>(void)</argsstring>
        <name>~parser_UTF8</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="114" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="903" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_113441f81fcddc3331a99a2c4e8574710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JSON::parser_UTF8::unmap</definition>
        <argsstring>()</argsstring>
        <name>unmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="116"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_1f26ebd86e49b9e8c5b3d4fba16001679" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_j_s_o_n_1_1value" kindref="compound">JSON::value</ref> &amp;</type>
        <definition>JSON::value &amp; parser_UTF8::parse</definition>
        <argsstring>(JSON::value &amp;rv)</argsstring>
        <name>parse</name>
        <param>
          <type><ref refid="class_j_s_o_n_1_1value" kindref="compound">JSON::value</ref> &amp;</type>
          <declname>rv</declname>
        </param>
        <briefdescription>
<para>parses a <ref refid="class_j_s_o_n_1_1value" kindref="compound">value</ref> from the input stream into <computeroutput>rv</computeroutput>. the input buffer must already have been mapped. </para>        </briefdescription>
        <detaileddescription>
<para>Remember, a valid <ref refid="namespace_j_s_o_n" kindref="compound">JSON</ref> object only has one top-level <ref refid="class_j_s_o_n_1_1value" kindref="compound">value</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="118" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="842" bodyend="844"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_1078e9097f481a6e2920bdda053b3f618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_j_s_o_n_1_1value" kindref="compound">JSON::value</ref> &amp;</type>
        <definition>JSON::value &amp; parser_UTF8::parse</definition>
        <argsstring>(JSON::value &amp;rv, std::string s)</argsstring>
        <name>parse</name>
        <param>
          <type><ref refid="class_j_s_o_n_1_1value" kindref="compound">JSON::value</ref> &amp;</type>
          <declname>rv</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>parses the <ref refid="namespace_j_s_o_n" kindref="compound">JSON</ref> string <computeroutput>s</computeroutput> into the <ref refid="class_j_s_o_n_1_1value" kindref="compound">value</ref> <computeroutput>rv</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If the initial string mapping failed, rv is unchanged, but error 10 is added to the parser </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="119" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="851" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_10bf741954ff7e7e5f8dcd4fd27241682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_j_s_o_n_1_1value" kindref="compound">JSON::value</ref> &amp;</type>
        <definition>JSON::value &amp; parser_UTF8::parse</definition>
        <argsstring>(JSON::value &amp;rv, const char *)</argsstring>
        <name>parse</name>
        <param>
          <type><ref refid="class_j_s_o_n_1_1value" kindref="compound">JSON::value</ref> &amp;</type>
          <declname>rv</declname>
        </param>
        <param>
          <type>const char *</type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>see <ref refid="class_j_s_o_n_1_1parser___u_n_i_190162b12d037eaa3128112340a5103f5" kindref="member">parser_UNI::parse(JSON::value&amp;, std::wstring)</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="120" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="862" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="class_j_s_o_n_1_1parser___u_t_f8_15aac5bfafdcd0796bb9f2e6e859ca4b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_j_s_o_n_1_1value" kindref="compound">JSON::value</ref> &amp;</type>
        <definition>JSON::value &amp; parser_UTF8::parsefile</definition>
        <argsstring>(JSON::value &amp;rv, const char *)</argsstring>
        <name>parsefile</name>
        <param>
          <type><ref refid="class_j_s_o_n_1_1value" kindref="compound">JSON::value</ref> &amp;</type>
          <declname>rv</declname>
        </param>
        <param>
          <type>const char *</type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>maps the file <computeroutput>s</computeroutput> into memory, then parses it into <computeroutput>rv</computeroutput> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="121" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.cpp" bodystart="874" bodyend="880"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A builder class for parsing UTF-8 files. </para>    </briefdescription>
    <detaileddescription>
<para>The in-memory character encoding for strings is determined at compile time. All conversions are handled automatically </para>    </detaileddescription>
    <collaborationgraph>
      <node id="8">
        <label>JSON::parser_UTF8</label>
        <link refid="class_j_s_o_n_1_1parser___u_t_f8"/>
        <childnode refid="9" relation="usage">
          <edgelabel>bfr</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>JSON::utf8buffer</label>
        <link refid="class_j_s_o_n_1_1utf8buffer"/>
      </node>
    </collaborationgraph>
    <location file="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" line="74" bodyfile="k:/Visual Studio 2008/Projects/libJSONpp/libJSONpp/parser_UTF8.h" bodystart="73" bodyend="122"/>
    <listofallmembers>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_1d1d46b64bbe46ccd4a91cb9b4daa98cf" prot="private" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>adderror</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_1b55fb139082b5de4bc93398e752b3cbd" prot="private" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>bfr</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_14b6b6df8920ae1eb798d2fb3ee58bfd8" prot="private" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>charisNumeric</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_15f6e6c4ecce0d9c741265cab0335c2b0" prot="private" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>charskipEOL</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_19ec1e0f0c9040ae2d73d2051d94546e6" prot="private" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>charskipWS</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_18c6baca6a0f18163fa3d36e9b39c8003" prot="public" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>errorcount</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_12f6a518bd6ecd49ed7e675b5f78fc877" prot="private" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>errs</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_1a7fe13e71520efe7478188af6f836d1f" prot="public" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>fail</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_14e04b3d9a01020fbb6f65d50fe076763" prot="public" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>geterrors</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_1f56b637e6feed65915e10e8e9a9aaf3d" prot="public" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>geterrorstring</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_1d46ff8757c23da4275dce8db69a135b7" prot="private" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>getvalue</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_1e0d86c88983afae5bdfa4558cc0d02af" prot="public" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>haveerror</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_15daf7deff5ac8c6643c6a948c2557941" prot="private" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>hextoint</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_119d72d4a8ec0b18ed26a728c46310852" prot="private" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>isEOL</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_1db2ee48be3d78c142d073e74f7d1189f" prot="public" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>JSON::test</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_1096e54223fc96719019b00ce30327d1a" prot="public" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>JSON::UTF_test</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_1f26ebd86e49b9e8c5b3d4fba16001679" prot="public" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>parse</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_1078e9097f481a6e2920bdda053b3f618" prot="public" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>parse</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_10bf741954ff7e7e5f8dcd4fd27241682" prot="public" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>parse</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_127d9c721c94772dbc41abf6adb0b97c0" prot="private" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>parseEscapes</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_15aac5bfafdcd0796bb9f2e6e859ca4b7" prot="public" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>parsefile</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_1524ae6d6fb2b696893e487796a6c0f1d" prot="public" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>parser_UTF8</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_120d458ae937d09c55948b095d3e228bc" prot="public" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>parser_UTF8</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_17818ee16111f69bbd0e5176e92472898" prot="public" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>parser_UTF8</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_17f390bac9b1df96640acfb3ced3f608f" prot="private" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>readarray</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_13d7c3afa269d5a0d5ce7850834456ee2" prot="private" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>readhexcode</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_1d6b4bbfea526863b47b6bddc7f78a31c" prot="private" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>readhexquad</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_147c6ac30926aa72be75be6f60e9757f3" prot="private" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>readlit</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_116d5e391f6d4bb04fd4812ebe9a280fe" prot="private" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>readnum</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_1327b5ededdd7095bc7bfb05d6d99bdf1" prot="private" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>readobject</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_18f26f14d15b59838efb1c75380006513" prot="private" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>readstring</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_1111fd36185edc9a552acb41b5e82daee" prot="private" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>readunquotedstring</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_15de60ef31696acaa8128341b0a1a21f4" prot="public" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>reseterrors</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_1b6bf72aed403690c9db7eb159268ad21" prot="private" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>skipWS</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_113441f81fcddc3331a99a2c4e8574710" prot="public" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>unmap</name></member>
      <member refid="class_j_s_o_n_1_1parser___u_t_f8_18fb6b4521e944c35c1fb231b3da3dd5a" prot="public" virt="non-virtual"><scope>JSON::parser_UTF8</scope><name>~parser_UTF8</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
